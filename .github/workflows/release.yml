name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag name
      id: get_tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Get release info
      id: release_info
      run: |
        # Extract version number for title
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Determine release type based on version pattern
        if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "release_type=stable" >> $GITHUB_OUTPUT
        else
          echo "release_type=prerelease" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        name: "ROTD ${{ steps.get_tag.outputs.tag_name }}: Primer Strategy & Multi-Agent Coordination"
        body: |
          ## About ROTD
          
          ROTD (Runtime-Oriented Test Discipline) is a development methodology and CLI tool that enforces systematic test-driven development through continuous task tracking, test summaries, and project health monitoring.
          
          ## What's New in This Release
          
          ### 🎯 ROTD Primer Strategy System
          - **Machine-readable project orientation** for LLM agents across sessions
          - **CLI commands**: `rotd primer init`, `show`, `check`, `parse`
          - **Structured project information** including components, dependencies, and workflows
          - **Agent-friendly JSON output** for automated project understanding
          
          ### 🤖 Multi-Agent Coordination
          - **Task claiming and coordination** - Agents can claim tasks based on their capabilities
          - **Real-time work registry** - Shared state tracking which agents are working on what tasks
          - **Capability-based routing** - Tasks are automatically assigned based on agent skills
          - **Coordination messaging** - Built-in communication system for agent coordination
          
          ### 🔧 Enhanced CLI Features
          - **Separated `update` and `upgrade` commands** - `rotd update` handles project methodology updates, `rotd upgrade` automatically downloads and installs CLI binary updates
          - **Automatic binary installation** - No more manual downloads required for CLI upgrades
          - **Platform detection** - Automatically detects and downloads correct binary for Linux, macOS, and Windows
          - **Backward compatibility fixes** - Resolves schema compatibility issues with existing projects
          
          ## Installation
          
          ### macOS (Recommended)
          
          **🍎 macOS Installer**: Download `rotd-macos-installer.pkg` for a guided installation that:
          - Creates a universal binary (works on Intel and Apple Silicon)
          - Automatically adds to your PATH
          - Updates existing installations
          - Provides a professional installer experience
          
          ### Manual Installation
          
          Download the appropriate binary for your platform:
          
          ```bash
          # Linux/macOS
          chmod +x rotd
          sudo mv rotd /usr/local/bin/
          
          # Or upgrade existing installation
          rotd upgrade
          ```
          
          ## Getting Started
          
          ```bash
          # Initialize ROTD in your project
          rotd init
          
          # Initialize project primer for agent orientation
          rotd primer init
          
          # Check project health
          rotd check
          
          # For multi-agent coordination
          export ROTD_AGENT_ID=agent-backend
          rotd coord beat
          rotd coord claim --capability backend_rust
          ```
          
          ## Key Commands
          
          - `rotd primer show` - View project primer
          - `rotd primer check` - Validate primer accuracy
          - `rotd --agent primer parse` - Get structured data for agents
          - `rotd update` - Update project methodology
          - `rotd upgrade` - Upgrade CLI binary
          
          Full documentation: https://github.com/jmfigueroa/rotd
        draft: false
        prerelease: ${{ steps.release_info.outputs.release_type == 'prerelease' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: rotd-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: rotd-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: rotd-macos-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: rotd-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }} rotd
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} rotd.exe
        cd ../../..
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos-installer:
    name: Build macOS Installer
    needs: create-release
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build universal binary
      run: |
        # Build for both architectures
        rustup target add x86_64-apple-darwin aarch64-apple-darwin
        cargo build --release --target x86_64-apple-darwin
        cargo build --release --target aarch64-apple-darwin
        
        # Create universal binary
        mkdir -p target/universal/release
        lipo -create \
          target/x86_64-apple-darwin/release/rotd \
          target/aarch64-apple-darwin/release/rotd \
          -output target/universal/release/rotd

    - name: Create installer structure
      run: |
        # Create installer directory structure
        mkdir -p installer/pkg/usr/local/bin
        mkdir -p installer/scripts
        mkdir -p installer/resources
        
        # Copy the universal binary
        cp target/universal/release/rotd installer/pkg/usr/local/bin/
        chmod +x installer/pkg/usr/local/bin/rotd
        
        # Create postinstall script to add to PATH and update existing installation
        cat > installer/scripts/postinstall << 'EOF'
        #!/bin/bash
        
        # Make sure /usr/local/bin is in PATH
        if ! echo "$PATH" | grep -q "/usr/local/bin"; then
            echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.zshrc
            echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bash_profile
        fi
        
        # Set proper permissions
        chmod +x /usr/local/bin/rotd
        
        # Create symlink if user has a different installation
        if [ -f "/usr/bin/rotd" ]; then
            ln -sf /usr/local/bin/rotd /usr/bin/rotd
        fi
        
        echo "ROTD CLI has been installed successfully!"
        echo "Run 'rotd --version' to verify the installation."
        echo "You may need to restart your terminal or run 'source ~/.zshrc' to update your PATH."
        
        exit 0
        EOF
        
        chmod +x installer/scripts/postinstall
        
        # Create preinstall script to backup existing installation
        cat > installer/scripts/preinstall << 'EOF'
        #!/bin/bash
        
        # Backup existing rotd installation if it exists
        if [ -f "/usr/local/bin/rotd" ]; then
            cp /usr/local/bin/rotd /tmp/rotd.backup
            echo "Backed up existing ROTD installation"
        fi
        
        exit 0
        EOF
        
        chmod +x installer/scripts/preinstall

    - name: Create installer metadata
      run: |
        # Create Distribution file
        cat > installer/Distribution << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
            <title>ROTD CLI ${{ needs.create-release.outputs.tag_name }}</title>
            <welcome file="welcome.html" mime-type="text/html" />
            <conclusion file="conclusion.html" mime-type="text/html" />
            <options customize="never" require-scripts="false" rootVolumeOnly="true" />
            <domains enable_anywhere="false" enable_currentUserHome="false" enable_localSystem="true" />
            <installation-check script="installationCheck()"/>
            <script>
            function installationCheck() {
                if(!(system.compareVersions(system.version.ProductVersion, '10.14') >= 0)) {
                    my.result.title = 'Unsupported macOS Version';
                    my.result.message = 'ROTD requires macOS 10.14 (Mojave) or later.';
                    my.result.type = 'Fatal';
                    return false;
                }
                return true;
            }
            </script>
            <choices-outline>
                <line choice="default">
                    <line choice="rotd"/>
                </line>
            </choices-outline>
            <choice id="default"/>
            <choice id="rotd" visible="false">
                <pkg-ref id="com.rotd.cli"/>
            </choice>
            <pkg-ref id="com.rotd.cli" version="0" onConclusion="none">rotd.pkg</pkg-ref>
        </installer-gui-script>
        EOF
        
        # Create welcome message
        cat > installer/resources/welcome.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 20px; }
                h1 { color: #007AFF; }
                .feature { margin: 10px 0; padding: 10px; background: #f5f5f5; border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>Welcome to ROTD CLI</h1>
            <p><strong>Runtime-Oriented Test Discipline</strong> - A development methodology and CLI tool that enforces systematic test-driven development through continuous task tracking, test summaries, and project health monitoring.</p>
            
            <div class="feature">
                <h3>🎯 Primer Strategy System</h3>
                <p>Machine-readable project orientation for LLM agents with structured project information and automated understanding capabilities.</p>
            </div>
            
            <div class="feature">
                <h3>🤖 Multi-Agent Coordination</h3>
                <p>Coordinate multiple AI agents or developers working on the same codebase with task claiming, capability routing, and real-time work registries.</p>
            </div>
            
            <div class="feature">
                <h3>🔄 Automatic Updates</h3>
                <p>Use <code>rotd upgrade</code> to automatically download and install CLI updates, or <code>rotd update</code> for project methodology updates.</p>
            </div>
            
            <p>This installer will place the <code>rotd</code> command in <code>/usr/local/bin</code> and ensure it's available in your PATH.</p>
        </body>
        </html>
        EOF
        
        # Create conclusion message
        cat > installer/resources/conclusion.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 20px; }
                h1 { color: #28a745; }
                code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
                .command { background: #000; color: #fff; padding: 10px; border-radius: 5px; font-family: monospace; }
            </style>
        </head>
        <body>
            <h1>✅ ROTD CLI Installed Successfully!</h1>
            
            <h3>Getting Started</h3>
            <p>Open Terminal and try these commands:</p>
            
            <div class="command">
                # Verify installation<br>
                rotd --version<br><br>
                
                # Initialize ROTD in your project<br>
                rotd init<br><br>
                
                # Initialize project primer<br>
                rotd primer init<br><br>
                
                # Check project health<br>
                rotd check<br><br>
                
                # For multi-agent coordination<br>
                export ROTD_AGENT_ID=agent-backend<br>
                rotd coord beat
            </div>
            
            <p><strong>Note:</strong> You may need to restart your terminal or run <code>source ~/.zshrc</code> to update your PATH.</p>
            
            <p>📖 Full documentation: <a href="https://github.com/jmfigueroa/rotd">https://github.com/jmfigueroa/rotd</a></p>
        </body>
        </html>
        EOF

    - name: Build package
      run: |
        # Create the component package
        pkgbuild \
          --root installer/pkg \
          --scripts installer/scripts \
          --identifier com.rotd.cli \
          --version ${{ needs.create-release.outputs.tag_name }} \
          --install-location / \
          installer/rotd.pkg
        
        # Create the product archive (installer)
        productbuild \
          --distribution installer/Distribution \
          --resources installer/resources \
          --package-path installer \
          rotd-macos-installer.pkg

    - name: Upload macOS Installer
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: rotd-macos-installer.pkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}