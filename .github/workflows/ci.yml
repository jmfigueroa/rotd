name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose

  validate-schemas:
    name: Validate JSON Schemas
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install ajv-cli
      run: npm install -g ajv-cli
    
    - name: Validate example files against schemas
      run: |
        ajv validate -s schema/task.schema.json -d examples/tasks.jsonl --spec=draft7
        ajv validate -s schema/pss_score.schema.json -d examples/pss_score.jsonl --spec=draft7

  test-cli-workflow:
    name: Test CLI Workflow
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build CLI
      run: cargo build --release
    
    - name: Test CLI init
      run: |
        ./target/release/rotd init --force
        ls -la .rotd/
        
    - name: Test CLI check
      run: ./target/release/rotd --agent check
    
    - name: Test agent commands
      run: |
        echo '{"id":"test","title":"Test task","status":"pending"}' | ./target/release/rotd agent update-task --dry-run
        ./target/release/rotd agent info

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run audit
      run: cargo audit